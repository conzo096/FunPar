package c05;

import java.awt.BorderLayout
import java.awt.Container
import java.awt.GridLayout
import java.awt.Label
import org.jcsp.awt.ActiveButton
import org.jcsp.awt.ActiveClosingFrame
import org.jcsp.awt.ActiveLabel
import org.jcsp.awt.ActiveTextArea
import org.jcsp.awt.ActiveTextEnterField
import org.jcsp.groovy.PAR
import org.jcsp.lang.CSProcess
import org.jcsp.lang.ChannelInput
import org.jcsp.lang.ChannelOutput

class ControllerUI implements CSProcess
{
	  
  def ChannelInput factor
  def ChannelInput data
  def ChannelOutput suspend
  def ChannelOutput injector
  
  void run()
  {
	  	// Create window to contain all visual display.
		def main = new ActiveClosingFrame("Exercise 11 - UI Scaling.").getActiveFrame()
		def suspendButton = new ActiveButton(null, suspend, "Suspend")
		def factorLabel = new Label("Old scaling factor: ")
		def factorValue = new ActiveLabel(factor)
		def injectLabel = new Label("Insert new factor:")
		def inText = new ActiveTextEnterField(null, injector)
		def outText = new ActiveTextArea(data, null)
		def container = new Container()
		container.setLayout ( new GridLayout(1,5) )
		container.add (suspendButton)
		container.add (factorLabel)
		container.add (factorValue)
		container.add (injectLabel)
		container.add (inText.getActiveTextField())
		main.setLayout(new BorderLayout())
		main.add(outText, BorderLayout.CENTER)
		main.add(container, BorderLayout.SOUTH)
		main.pack()
		main.setVisible(true)
		def network = [main, factorValue, inText, outText, suspendButton]
		new PAR (network).run()
  }
}
